
pipeline {
    agent any
    environment {
        DOCKER_Harbor_path = "192.168.40.200:57777"
        DOCKER_CREDENTIALS_ID = "Harbor"
        IMAGE_NAME = "react"
        IMAGE_TAG = "2.0.0"
        CANARY_IMAGE_TAG = "2.0.1"
        GIT_REPO_URL = "git@192.168.40.200:devteam/"
        REPO_PATH = "web-server"
        REMOTE_HOST = "192.168.40.100"
        REMOTE_USER = "user1"
        WEBHOOK_TRIGGERED = "false"
    }

    stages {
        stage('git scm update') {
            steps {
                git url: "${GIT_REPO_URL}${REPO_PATH}.git", branch: 'master'
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_Harbor_path}/${REPO_PATH}/${IMAGE_NAME}:${CANARY_IMAGE_TAG}", "-f Dockerfile .")
                    docker.withRegistry("http://${DOCKER_Harbor_path}", DOCKER_CREDENTIALS_ID) {
                        sh "docker push ${DOCKER_Harbor_path}/${REPO_PATH}/${IMAGE_NAME}:${CANARY_IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Change Manifest.yaml') {
            steps {
                sh "sed -i 's|image: ${DOCKER_Harbor_path}/${REPO_PATH}/.*|image: ${DOCKER_Harbor_path}/${REPO_PATH}/${IMAGE_NAME}:${IMAGE_TAG}|' yaml/primary-web-deployment.yaml"
                sh "sed -i 's|image: ${DOCKER_Harbor_path}/${REPO_PATH}/.*|image: ${DOCKER_Harbor_path}/${REPO_PATH}/${IMAGE_NAME}:${CANARY_IMAGE_TAG}|' yaml/secondary-web-deployment.yaml"
            }
        }

        stage('CD Trigger') {
            when {
                expression {
                    def changes = sh(script: "git diff --name-only", returnStdout: true).trim()
                    def trigger = env.WEBHOOK_TRIGGERED == "false" && changes != ""
                    if (trigger) {
                        env.WEBHOOK_TRIGGERED = "true"
                    }
                    return trigger
                }
            }
            steps {
                script {
                    dir("${GIT_REPO_URL}${REPO_PATH}.git") {
                        withCredentials([sshUserPrivateKey(credentialsId: 'GitLab_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                            sh """
                                git config user.email 'jenkins@example.com'
                                git config user.name 'Jenkins'
                                git add ~/workspace/k8s-web-server-Jenkins/yaml/*.yaml
                                git commit -m 'Update image in YAML files'
                                git push origin master
                            """
                        }
                    }
                }
            }
        }

        stage('Trigger ArgoCD Sync') {
            when {
                expression {
                    currentBuild.resultIsBetterOrEqualTo('SUCCESS')
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Argo', usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                        sh "ssh ${REMOTE_USER}@${REMOTE_HOST} 'argocd login 192.168.10.100:30002 --insecure --username ${ARGOCD_USERNAME} --password ${ARGOCD_PASSWORD}'"
                        sh "ssh ${REMOTE_USER}@${REMOTE_HOST} 'argocd app sync ${REPO_PATH}'"
                    }
                }
            }
        }
    }
}
